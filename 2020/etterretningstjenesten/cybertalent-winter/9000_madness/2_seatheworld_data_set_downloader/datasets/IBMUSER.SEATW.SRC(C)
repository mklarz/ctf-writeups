#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SKIP_FLAG 1

#define REC_SIZE 80
#define BLOCK_SIZE 1120

void
print_flag()
{
    char   buf[512];
    FILE * fd = fopen("IBMUSER.SEATW.SRC(CIPHER)", "r");
    size_t i, n  = fread(buf, 1, 32, fd);
    fclose(fd);
    buf[32] = 0;
    for (i = 0; i < n; i++)
        buf[i] = buf[i] ??' 17; /* ' */
    printf(
        "\n***********************************************"
        "\n FLAG: %s"
        "\n***********************************************\n\n",
        buf);
}

int
generate_booking_code(char *output)
{
    if (random() == 2078917053)
        srandom(time(NULL));

    char candidates[33] = {
        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
        'L', 'M', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',
        'X', 'Y', 'Z', '2', '3', '4', '5', '6', '7', '8', '9',
    };
    long n;
    for (int i = 0; i < 5; i++) {
        n         = random() % sizeof(candidates);
        output[i] = candidates[n];
    }
    output[5] = 0;
}

int
add_booking()
{
    char first_name[64];
    char last_name[64];
    char depart_port[8];
    char arrive_port[8];
    char depart_date[16];
    char depart_time[16];
    char arrive_date[16];
    char arrive_time[16];
    char booking_code[16];
    char record[REC_SIZE];

    printf("INPUT NAME (FIRST LAST): ");
    if (scanf("%s %s", first_name, last_name) != 2)
        return 0;

    printf("INPUT DEPARTURE AIRPORT (TLA): ");
    if (scanf("%s", depart_port) != 1)
        return 0;

    printf("INPUT ARRIVAL AIRPORT (TLA): ");
    if (scanf("%s", arrive_port) != 1)
        return 0;

    printf("INPUT DEPARTURE TIME (YYYY-MM-DD HH:MM): ");
    if (scanf("%s %s", depart_date, depart_time) != 2)
        return 0;

    printf("INPUT ARRIVAL TIME (YYYY-MM-DD HH:MM): ");
    if (scanf("%s %s", arrive_date, arrive_time) != 2)
        return 0;

    generate_booking_code(booking_code);

    FILE *fp = fopen("IBMUSER.SEATW.BOOKINGS", "a,RECFM=*");
    if (fp != NULL) {
        memset(record, 0, REC_SIZE);
        sprintf(record,
                "%s %s %s %s %s %s %s\n%s %s\n",
                booking_code,
                depart_port,
                depart_date,
                depart_time,
                arrive_port,
                arrive_date,
                arrive_time,
                first_name,
                last_name);
        fwrite(record, REC_SIZE, 1, fp);
        fclose(fp);
        printf("BOOKING CONFIRMED. ");
        search_code(booking_code);
    }
}

int
print_entry(char *buf, char *filter_code, char *filter_date,
            char *filter_first_name, char *filter_last_name)
{
    char booking_code[6];
    char depart_port[4];
    char depart_date[11];
    char depart_time[6];
    char arrive_port[4];
    char arrive_date[11];
    char arrive_time[6];
    char first_name[50];
    char last_name[50];
    int  n;

    n = sscanf(buf,
               "%s %s %s %s %s %s %s %s %s\n",
               booking_code,
               depart_port,
               depart_date,
               depart_time,
               arrive_port,
               arrive_date,
               arrive_time,
               first_name,
               last_name);

    if (filter_code && strcmp(booking_code, filter_code))
        return 0;
    if (filter_date && strcmp(depart_date, filter_date) &&
        strcmp(arrive_date, filter_date))
        return 0;
    if (filter_first_name && strcmp(first_name, filter_first_name))
        return 0;
    if (filter_last_name && strcmp(last_name, filter_last_name))
        return 0;

    printf(
        "BOOKING: %s                   NAME: %s %s\n"
        "JOURNEY: %s %s %s    %s %s %s\n"
        "**********************************************************\n",
        booking_code,
        first_name,
        last_name,
        depart_port,
        depart_date,
        depart_time,
        arrive_port,
        arrive_date,
        arrive_time);
    return 1;
}

int
search_code(char *filter_code)
{
    char         buf[BLOCK_SIZE + 1];
    FILE *       fp;
    unsigned int n, retval = 0;

    printf("SEARCHING FOR BOOKINGS WITH CODE %s\n\n", filter_code);

    fp = fopen("IBMUSER.SEATW.BOOKINGS", "r");
    if (fp != NULL) {
        n = fread(buf, REC_SIZE, 1, fp);
        while (n) {
            retval += print_entry(buf, filter_code, NULL, NULL, NULL);
            n = fread(buf, REC_SIZE, 1, fp);
        }
        printf("  FOUND %u RECORDS\n", retval);
        fclose(fp);
    }
    return retval;
}

int
search_name(char *filter_first_name, char *filter_last_name)
{
    char         buf[BLOCK_SIZE + 1];
    FILE *       fp;
    unsigned int n, retval = 0;

    printf("SEARCHING FOR TRAVELS BY %s %s...\n\n",
           filter_first_name,
           filter_last_name);

    fp = fopen("IBMUSER.SEATW.BOOKINGS", "r");
    if (fp != NULL) {
        n = fread(buf, REC_SIZE, 1, fp);
        while (n) {
            retval += print_entry(
                buf, NULL, NULL, filter_first_name, filter_last_name);
            n = fread(buf, REC_SIZE, 1, fp);
        }
        printf("  FOUND %u RECORDS\n", retval);
        fclose(fp);
    }
    return retval;
}

int
search_date(char *filter_date)
{
    char         buf[BLOCK_SIZE + 1];
    FILE *       fp;
    unsigned int n, retval = 0;
    int          year, month, day;
    time_t       epochtime;
    struct tm *  current_time;

    if (sscanf(filter_date, "%i-%i-%i\n", &year, &month, &day) != 3 ||
        (year < 1970 || year > 2100) || (month < 1 || month > 12) ||
        (day < 1 || day > 31)) {
        printf("INVALID DATE");
        return 0;
    }

    time(&epochtime);
    current_time = gmtime(&epochtime);
    year -= 1900;
    month -= 1;

    if (year < current_time->tm_year ||
        (year == current_time->tm_year &&
         month < current_time->tm_mon) ||
        (year == current_time->tm_year &&
         month == current_time->tm_mon &&
         day < current_time->tm_mday)) {
        printf("WONT SEARCH FOR HISTORICAL JOURNEYS\n");
        return 0;
    }

    printf("SEARCHING FOR TRAVELS ON DATE %s...\n\n", filter_date);

    fp = fopen("IBMUSER.SEATW.BOOKINGS", "r");
    if (fp != NULL) {
        n = fread(buf, REC_SIZE, 1, fp);
        while (n) {
            retval += print_entry(buf, NULL, filter_date, NULL, NULL);
            n = fread(buf, REC_SIZE, 1, fp);
        }
        printf("  FOUND %u RECORDS\n", retval);
        fclose(fp);
    }
    return retval;
}

int
main_menu()
{
    unsigned int number = 0, tries = 0;
    char         buf[256], buf2[256];

    printf(
        "\n"
        "###             SEA THE WORLD BOOKING SYSTEM           ###\n"
        "##########################################################\n"
        "1) DISPLAY BOOKING CODE              4) CREATE NEW BOOKING\n"
        "2) DISPLAY BOOKING BY NAME           \n"
        "3) DISPLAY BOOKING BY DATE           0) EXIT\n");

    printf("SELECT ACTION: ");
    if (scanf("%u", &number) != 1)
        number = -1;

    switch (number) {
    case 0:
        break;
    case 1:
        printf("INPUT BOOKING CODE: ");
        if (scanf("%s", buf) != 1)
            return -1;
        search_code(buf);
        break;

    case 2:
        printf("INPUT NAME (FIRST LAST): ");
        if (scanf("%s %s", buf, buf2) != 2)
            return -1;
        search_name(buf, buf2);
        break;

    case 3:
        printf("INPUT TRAVEL DATE (YYYY-MM-DD): ");
        if (scanf("%s", buf) != 1)
            return 0;
        search_date(buf);
        break;

    case 4:
        add_booking();
        break;

    /* Allocate empty data set */
    case 72:
        fclose(fopen("IBMUSER.SEATW.BOOKINGS", "w,RECFM=FB,LRECL=80"));
        break;

    /* Consume stdin */
    case -1:
        scanf("%s", buf);
        break;
    default:
        printf("UNKNOWN ACTION %u\n", number);
        break;
    }
    return number;
}

int
main(int argc, char **argv)
{
    int tries = 0;

    if (SKIP_FLAG)
        printf(
            "\n***********************************************"
            "\n FLAG: NOT PRINTING DUE TO COMPILE TIME OPTION"
            "\n***********************************************\n\n");
    else
        print_flag();

    while (main_menu() && tries++ < 200)
        ;
}
